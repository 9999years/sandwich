(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),b=r,m=d["".concat(o,".").concat(b)]||d[b]||p[b]||i;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(3),a=n(7),i=(n(0),n(109)),o={id:"test_trees",title:"Test Trees",sidebar_label:"Test Trees"},c={unversionedId:"test_trees",id:"test_trees",isDocsHomePage:!1,title:"Test Trees",description:"Sandwich is built around the idea of a test tree. You write a test tree using simple monadic syntax. The simplest kinds of nodes are describe and it nodes, which are used to group and define tests. For example:",source:"@site/docs/test_trees.md",slug:"/test_trees",permalink:"/docs/test_trees",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/test_trees.md",version:"current",sidebar_label:"Test Trees"},s=[],l={toc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Sandwich is built around the idea of a ",Object(i.b)("em",{parentName:"p"},"test tree"),". You write a test tree using simple monadic syntax. The simplest kinds of nodes are ",Object(i.b)("inlineCode",{parentName:"p"},"describe")," and ",Object(i.b)("inlineCode",{parentName:"p"},"it")," nodes, which are used to group and define tests. For example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-haskell"},'tests = describe "arithmetic" $ do\n  it "adds" $ do\n    (2 + 2) `shouldBe` 4\n\n  it "subtracts" $ do\n    warn "Having some trouble getting this test to pass..."\n    (2 - 2) `shouldBe` 1\n')),Object(i.b)("p",null,"However, several other node types also exist:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"parallel")," node: runs all of its child nodes in parallel."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"before"),"/",Object(i.b)("inlineCode",{parentName:"li"},"beforeEach")," runs an action before its child nodes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"after"),"/",Object(i.b)("inlineCode",{parentName:"li"},"afterEach")," runs an action after its child nodes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"around"),"/",Object(i.b)("inlineCode",{parentName:"li"},"aroundEach")," wrap the child nodes with a callback."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"introduce"),"/",Object(i.b)("inlineCode",{parentName:"li"},"introduceWith")," supply a ",Object(i.b)("em",{parentName:"li"},"context")," to its child nodes.")))}u.isMDXComponent=!0}}]);