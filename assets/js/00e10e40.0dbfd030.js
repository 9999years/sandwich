(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{104:function(e,c,t){"use strict";t.d(c,"a",(function(){return p})),t.d(c,"b",(function(){return k}));var n=t(0),a=t.n(n);function r(e,c,t){return c in e?Object.defineProperty(e,c,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[c]=t,e}function i(e,c){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);c&&(n=n.filter((function(c){return Object.getOwnPropertyDescriptor(e,c).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var c=1;c<arguments.length;c++){var t=null!=arguments[c]?arguments[c]:{};c%2?i(Object(t),!0).forEach((function(c){r(e,c,t[c])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(c){Object.defineProperty(e,c,Object.getOwnPropertyDescriptor(t,c))}))}return e}function o(e,c){if(null==e)return{};var t,n,a=function(e,c){if(null==e)return{};var t,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],c.indexOf(t)>=0||(a[t]=e[t]);return a}(e,c);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],c.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),h=function(e){var c=a.a.useContext(u),t=c;return e&&(t="function"==typeof e?e(c):s(s({},c),e)),t},p=function(e){var c=h(e.components);return a.a.createElement(u.Provider,{value:c},e.children)},d={inlineCode:"code",wrapper:function(e){var c=e.children;return a.a.createElement(a.a.Fragment,{},c)}},l=a.a.forwardRef((function(e,c){var t=e.components,n=e.mdxType,r=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=h(t),l=n,k=p["".concat(i,".").concat(l)]||p[l]||d[l]||r;return t?a.a.createElement(k,s(s({ref:c},u),{},{components:t})):a.a.createElement(k,s({ref:c},u))}));function k(e,c){var t=arguments,n=c&&c.mdxType;if("string"==typeof e||n){var r=t.length,i=new Array(r);i[0]=l;var s={};for(var o in c)hasOwnProperty.call(c,o)&&(s[o]=c[o]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var u=2;u<r;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}l.displayName="MDXCreateElement"},68:function(e,c,t){"use strict";t.r(c),t.d(c,"frontMatter",(function(){return i})),t.d(c,"metadata",(function(){return s})),t.d(c,"toc",(function(){return o})),t.d(c,"default",(function(){return h}));var n=t(3),a=t(7),r=(t(0),t(104)),i={id:"sandwich-quickcheck",title:"QuickCheck integration"},s={unversionedId:"extensions/sandwich-quickcheck",id:"extensions/sandwich-quickcheck",isDocsHomePage:!1,title:"QuickCheck integration",description:"You can use sandwich-quickcheck (provided as a separate package) to easily integrate integrate QuickCheck tests into the test tree.",source:"@site/docs/extensions/sandwich-quickcheck.md",slug:"/extensions/sandwich-quickcheck",permalink:"/sandwich/docs/extensions/sandwich-quickcheck",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extensions/sandwich-quickcheck.md",version:"current",sidebar:"docs",previous:{title:"Selenium integration",permalink:"/sandwich/docs/extensions/sandwich-webdriver"},next:{title:"Hedgehog integration",permalink:"/sandwich/docs/extensions/sandwich-hedgehog"}},o=[{value:"Usage",id:"usage",children:[]},{value:"Modifying the args",id:"modifying-the-args",children:[]},{value:"Controlling QuickCheck parameters with command line args",id:"controlling-quickcheck-parameters-with-command-line-args",children:[]}],u={toc:o};function h(e){var c=e.components,t=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},u,t,{components:c,mdxType:"MDXLayout"}),Object(r.b)("p",null,"You can use ",Object(r.b)("inlineCode",{parentName:"p"},"sandwich-quickcheck")," (provided as a separate package) to easily integrate integrate ",Object(r.b)("a",{parentName:"p",href:"http://www.cse.chalmers.se/~rjmh/QuickCheck/manual.html"},"QuickCheck")," tests into the test tree."),Object(r.b)("p",null,"Haddocks can be found ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html"},"here"),"."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"To use ",Object(r.b)("inlineCode",{parentName:"p"},"sandwich-quickcheck"),", just add the package to your project. Then, introduce a QuickCheck argument context using ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:introduceQuickCheck"},"introduceQuickCheck"),". Now you can start writing props as test nodes using the ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:prop"},"prop")," function. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-quickcheck/app/Main.hs"',title:'"https://github.com/codedownio/sandwich/blob/master/demos/demo-quickcheck/app/Main.hs"'},'quickCheckDemo :: TopSpec\nquickCheckDemo = describe "QuickCheck tests" $ introduceQuickCheck $ do\n  prop "List reversal" $ \\(xs :: [Int]) -> reverse (reverse xs) == xs\n  prop "Failing list reversal" $ \\(xs :: [Int]) -> (reverse xs) == xs\n')),Object(r.b)("h2",{id:"modifying-the-args"},"Modifying the args"),Object(r.b)("p",null,"If you use ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:introduceQuickCheck'"},"introduceQuickCheck'"),", you can pass your own value for the QuickCheck ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#t:Args"},"Args"),". The default version uses ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck.html#v:stdArgs"},"stdArgs"),"."),Object(r.b)("p",null,"If you want to modify the already-introduced arguments in a test tree, we provide the ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-quickcheck/docs/Test-Sandwich-QuickCheck.html#v:modifyArgs"},"modifyArgs")," function, as well as helpers like ",Object(r.b)("inlineCode",{parentName:"p"},"modifyMaxSize"),", ",Object(r.b)("inlineCode",{parentName:"p"},"modifyMaxDiscardRatio"),", etc. These are modelled directly after HSpec's ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/hspec/docs/Test-Hspec-QuickCheck.html"},"Test.Hspec.QuickCheck"),"."),Object(r.b)("h2",{id:"controlling-quickcheck-parameters-with-command-line-args"},"Controlling QuickCheck parameters with command line args"),Object(r.b)("p",null,"Some QuickCheck parameters can be controlled via the command line. To see the valid options, run Sandwich with ",Object(r.b)("inlineCode",{parentName:"p"},"--print-quickcheck-flags"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"Usage: demo [--quickcheck-seed INT]\n            [--quickcheck-max-discard-ratio INT]\n            [--quickcheck-max-size INT] [--quickcheck-max-success INT]\n            [--quickcheck-max-shrinks INT]\n\nAvailable options:\n  --quickcheck-seed INT    QuickCheck seed\n  --quickcheck-max-discard-ratio INT\n                           Maximum number of discarded tests per successful test\n                           before giving up\n  --quickcheck-max-size INT\n                           Size to use for the biggest test cases\n  --quickcheck-max-success INT\n                           Maximum number of successful tests before succeeding\n  --quickcheck-max-shrinks INT\n                           Maximum number of shrinks before giving up\n")))}h.isMDXComponent=!0}}]);