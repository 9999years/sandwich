(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{103:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),i=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=i.a.createContext({}),l=function(e){var t=i.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return i.a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),b=r,f=d["".concat(o,".").concat(b)]||d[b]||p[b]||s;return n?i.a.createElement(f,a(a({ref:t},u),{},{components:n})):i.a.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=b;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var u=2;u<s;u++)o[u]=n[u];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},104:function(e,t,n){"use strict";n.d(t,"b",(function(){return s})),n.d(t,"a",(function(){return o}));var r=n(16),i=n(106);function s(){const{siteConfig:{baseUrl:e="/",url:t}={}}=Object(r.default)();return{withBaseUrl:(n,r)=>function(e,t,n,{forcePrependBaseUrl:r=!1,absolute:s=!1}={}){if(!n)return n;if(n.startsWith("#"))return n;if(Object(i.b)(n))return n;if(r)return t+n;const o=n.startsWith(t)?n:t+n.replace(/^\//,"");return s?e+o:o}(t,e,n,r)}}function o(e,t={}){const{withBaseUrl:n}=s();return n(e,t)}},106:function(e,t,n){"use strict";function r(e){return!0===/^(\w*:|\/\/)/.test(e)}function i(e){return void 0!==e&&!r(e)}n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return i}))},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return a})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),i=n(7),s=(n(0),n(103)),o=(n(104),{id:"discovery",title:"Test Discovery",sidebar_label:"Test Discovery"}),a={unversionedId:"discovery",id:"discovery",isDocsHomePage:!1,title:"Test Discovery",description:"Test discovery is the process of automatically finding test files, so you don't need to have to manually manage your imports and write out a top-level test-tree.",source:"@site/docs/discovery.md",slug:"/discovery",permalink:"/sandwich/docs/discovery",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/discovery.md",version:"current",sidebar_label:"Test Discovery",sidebar:"docs",previous:{title:"Command line arguments",permalink:"/sandwich/docs/command_line"},next:{title:"Terminal UI Formatter",permalink:"/sandwich/docs/formatters/tui"}},c=[{value:"The basic setup",id:"the-basic-setup",children:[]},{value:"Listing available tests",id:"listing-available-tests",children:[]},{value:"Main function autodetection",id:"main-function-autodetection",children:[]}],u={toc:c};function l(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Test discovery is the process of automatically finding test files, so you don't need to have to manually manage your imports and write out a top-level test-tree."),Object(s.b)("p",null,"For the purposes of this discussion, let's assume a somewhat complex test suite with different kinds of tests, laid out on disk like this:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-bash"},"<project root>\n\u2514\u2500 tests\n   \u251c\u2500 Main.hs\n   \u251c\u2500 UnitTests.hs\n   \u251c\u2500 UnitTests\n   \u2502  \u251c\u2500 UnitTests1.hs\n   \u2502  \u2514\u2500 UnitTests2.hs\n   \u251c\u2500 SeleniumTests.hs\n   \u2514\u2500 SeleniumTests\n      \u251c\u2500 SeleniumTests1.hs\n      \u2514\u2500 SeleniumTests2.hs\n")),Object(s.b)("p",null,"In ",Object(s.b)("inlineCode",{parentName:"p"},"Main.hs"),", we want to automatically generate something like this:"),Object(s.b)("pre",null,Object(s.b)("code",{parentName:"pre",className:"language-haskell"},'module Main where\n\nimport Test.Sandwich\nimport Test.Sandwich.WebDriver\n\nimport qualified UnitTests.UnitTests1\nimport qualified UnitTests.UnitTests2\nimport qualified SeleniumTests.SeleniumTests1\nimport qualified SeleniumTests.SeleniumTests2\n\ntests = do\n  describe "Unit tests" $ do\n    UnitTests1.tests\n    UnitTests2.tests\n\n  introduceWebDriver (defaultWdOptions "/tmp/tools") $ \n    describe "Selenium tests" $ do\n      SeleniumTests1.tests\n      SeleniumTests2.tests\n')),Object(s.b)("h2",{id:"the-basic-setup"},"The basic setup"),Object(s.b)("p",null,"Autogenerating this stuff requires two pieces of code in your file:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},"A CPP pragma to generate the imports, and"),Object(s.b)("li",{parentName:"ul"},"A Template Haskell call to generate the test tree")),Object(s.b)("p",null,"Unfortunately it can't all be done with Template Haskell, because ",Object(s.b)("a",{parentName:"p",href:"https://gitlab.haskell.org/ghc/ghc/-/issues/1475"},"TH cannot generate imports"),"."),Object(s.b)("h2",{id:"listing-available-tests"},"Listing available tests"),Object(s.b)("h2",{id:"main-function-autodetection"},"Main function autodetection"))}l.isMDXComponent=!0}}]);