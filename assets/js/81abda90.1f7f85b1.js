(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{104:function(e,t,n){"use strict";n.d(t,"a",(function(){return g})),n.d(t,"b",(function(){return u}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var h=o.a.createContext({}),c=function(e){var t=o.a.useContext(h),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},g=function(e){var t=c(e.components);return o.a.createElement(h.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},p=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),g=c(n),p=a,u=g["".concat(i,".").concat(p)]||g[p]||l[p]||r;return n?o.a.createElement(u,d(d({ref:t},h),{},{components:n})):o.a.createElement(u,d({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var h=2;h<r;h++)i[h]=n[h];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return d})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(3),o=n(7),r=(n(0),n(104)),i={id:"sandwich-hedgehog",title:"Hedgehog integration"},d={unversionedId:"extensions/sandwich-hedgehog",id:"extensions/sandwich-hedgehog",isDocsHomePage:!1,title:"Hedgehog integration",description:"You can use sandwich-hedgehog (provided as a separate package) to easily integrate integrate Hedgehog tests into the test tree.",source:"@site/docs/extensions/sandwich-hedgehog.md",slug:"/extensions/sandwich-hedgehog",permalink:"/sandwich/docs/extensions/sandwich-hedgehog",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/extensions/sandwich-hedgehog.md",version:"current",sidebar:"docs",previous:{title:"QuickCheck integration",permalink:"/sandwich/docs/extensions/sandwich-quickcheck"}},s=[{value:"Usage",id:"usage",children:[]},{value:"Modifying the parameters",id:"modifying-the-parameters",children:[]},{value:"Controlling Hedgehog parameters with command line args",id:"controlling-hedgehog-parameters-with-command-line-args",children:[]},{value:"Demo",id:"demo",children:[]}],h={toc:s};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},h,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"You can use ",Object(r.b)("inlineCode",{parentName:"p"},"sandwich-hedgehog")," (provided as a separate package) to easily integrate integrate ",Object(r.b)("a",{parentName:"p",href:"https://hedgehog.qa/"},"Hedgehog")," tests into the test tree."),Object(r.b)("p",null,"Haddocks can be found ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html"},"here"),"."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"To use ",Object(r.b)("inlineCode",{parentName:"p"},"sandwich-hedgehog"),", just add the package to your project. Then, introduce a Hedgehog argument context using ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#v:introduceHedgehog"},"introduceHedgehog"),". Now you can start writing props as test nodes using the ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#v:prop"},"prop")," function. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-hedgehog/app/Main.hs"',title:'"https://github.com/codedownio/sandwich/blob/master/demos/demo-hedgehog/app/Main.hs"'},'import Hedgehog\nimport qualified Hedgehog.Gen as Gen\nimport qualified Hedgehog.Range as Range\n\nhedgehogDemo :: TopSpec\nhedgehogDemo = describe "Hedgehog tests" $ introduceHedgehog $ do\n  prop "List reversal" $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse (reverse xs) === xs\n\n  prop "Failing list reversal" $ do\n    xs <- forAll $ Gen.list (Range.linear 0 100) Gen.alpha\n    reverse xs === xs\n')),Object(r.b)("h2",{id:"modifying-the-parameters"},"Modifying the parameters"),Object(r.b)("p",null,"If you use ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#v:introduceHedgehog'"},"introduceHedgehog'"),", you can pass your own value for the ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#t:HedgehogParams"},"HedgehogParams"),"."),Object(r.b)("p",null,"If you want to modify the already-introduced arguments in a test tree, we provide the ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#v:modifyArgs"},"modifyArgs")," function, as well as helpers like ",Object(r.b)("inlineCode",{parentName:"p"},"modifySeed"),", ",Object(r.b)("inlineCode",{parentName:"p"},"modifySize"),", etc. These are modelled directly after HSpec's ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/hspec-hedgehog/docs/Test-Hspec-Hedgehog.html"},"Test.Hspec.Hedgehog"),"."),Object(r.b)("h2",{id:"controlling-hedgehog-parameters-with-command-line-args"},"Controlling Hedgehog parameters with command line args"),Object(r.b)("p",null,"If you use the ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich-hedgehog/docs/Test-Sandwich-Hedgehog.html#v:introduceHedgehogCommandLineOptions"},"introduceHedgehogCommandLineOptions")," family of functions, then some Hedgehog parameters can be controlled via the command line. To see the valid options, run Sandwich with ",Object(r.b)("inlineCode",{parentName:"p"},"--print-hedgehog-flags"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"Usage: demo [--hedgehog-seed STRING] [--hedgehog-size INT]\n            [--hedgehog-discard-limit INT]\n            [--hedgehog-shrink-limit INT]\n            [--hedgehog-shrink-retries INT] [--hedgehog-confidence INT]\n\nAvailable options:\n  --hedgehog-seed STRING   Seed as a tuple (a, b)\n  --hedgehog-size INT      Size of the randomly-generated data\n  --hedgehog-discard-limit INT\n                           The number of times a property is allowed to discard\n                           before the test runner gives up\n  --hedgehog-shrink-limit INT\n                           The number of times a property is allowed to shrink\n                           before the test runner gives up and prints the\n                           counterexample\n  --hedgehog-shrink-retries INT\n                           The number of times to re-run a test during shrinking\n  --hedgehog-confidence INT\n                           The acceptable occurrence of false positives\n")),Object(r.b)("h2",{id:"demo"},"Demo"),Object(r.b)("p",null,"A demo is provided in the Sandwich repo."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:codedownio/sandwich.git\ncd sandwich\nstack run demo-hedgehog -- --tui\n")))}c.isMDXComponent=!0}}]);