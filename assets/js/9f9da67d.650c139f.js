(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),m=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},u=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=m(n),u=a,h=p["".concat(i,".").concat(u)]||p[u]||d[u]||r;return n?o.a.createElement(h,s(s({ref:t},l),{},{components:n})):o.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return m}));var a=n(3),o=n(7),r=(n(0),n(102)),i={id:"command_line",title:"Command line arguments",sidebar_label:"Command line"},s={unversionedId:"command_line",id:"command_line",isDocsHomePage:!1,title:"Command line arguments",description:"If you use runSandwichWithCommandLineArgs, then you can control your tests with command line arguments. This section contains a quick overview of the available arguments, and explains how you can add your own custom ones.",source:"@site/docs/command_line.md",slug:"/command_line",permalink:"/sandwich/docs/command_line",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/command_line.md",version:"current",sidebar_label:"Command line",sidebar:"docs",previous:{title:"Timing",permalink:"/sandwich/docs/timing"},next:{title:"Test Discovery",permalink:"/sandwich/docs/discovery"}},c=[{value:"Quick reference",id:"quick-reference",children:[]},{value:"Custom command line arguments",id:"custom-command-line-arguments",children:[]}],l={toc:c};function m(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"If you use ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich.html#v:runSandwichWithCommandLineArgs"},"runSandwichWithCommandLineArgs"),", then you can control your tests with command line arguments. This section contains a quick overview of the available arguments, and explains how you can add your own custom ones."),Object(r.b)("h2",{id:"quick-reference"},"Quick reference"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Choose a formatter: ",Object(r.b)("inlineCode",{parentName:"li"},"--tui"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--print"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--print-failures"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--silent"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--auto"),"."),Object(r.b)("li",{parentName:"ul"},"Choose a default log level: ",Object(r.b)("inlineCode",{parentName:"li"},"--debug"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--info"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--warn"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--error"),"."),Object(r.b)("li",{parentName:"ul"},"Repeat the test suite N times: ",Object(r.b)("inlineCode",{parentName:"li"},"--repeat n")," (useful to exercise flaky tests)"),Object(r.b)("li",{parentName:"ul"},"Filter the test tree to a string: ",Object(r.b)("inlineCode",{parentName:"li"},"--filter some_string"),"."),Object(r.b)("li",{parentName:"ul"},"Learn about extra flags controlling extensions: ",Object(r.b)("inlineCode",{parentName:"li"},"--print-slack-flags"),", ",Object(r.b)("inlineCode",{parentName:"li"},"--print-webdriver-flags"),"."),Object(r.b)("li",{parentName:"ul"},"List test modules and flags to run them individually: ",Object(r.b)("inlineCode",{parentName:"li"},"--list-tests"),". (Requires the use of ",Object(r.b)("a",{parentName:"li",href:"discovery"},"test discovery"),".)")),Object(r.b)("p",null,"This list isn't exhaustive; to learn more about shorthands and other options pass ",Object(r.b)("inlineCode",{parentName:"p"},"--help"),"."),Object(r.b)("h2",{id:"custom-command-line-arguments"},"Custom command line arguments"),Object(r.b)("p",null,"For more complex tests, you may want to be able to control them with custom command line arguments. To do this, you can write your own set of options with ",Object(r.b)("a",{parentName:"p",href:"https://hackage.haskell.org/package/optparse-applicative"},"optparse-applicative")," and run your tests with ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich.html#v:runSandwichWithCommandLineArgs-39-"},"runSandwichWithCommandLineArgs'"),". The primed version accepts your custom options parser."),Object(r.b)("p",null,"This will cause your options to be parsed along with the default ones. To obtain the full command line options inside a test, call ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Contexts.html#v:getCommandLineOptions"},"getCommandLineOptions"),". This will return a ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Misc.html#t:CommandLineOptions"},"CommandLineOptions a"),", where ",Object(r.b)("inlineCode",{parentName:"p"},"a")," is your custom options type. A convenient helper is ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Contexts.html#v:getCommandLineOptions"},"getUserCommandLineOptions"),", which returns only the ",Object(r.b)("inlineCode",{parentName:"p"},"a")," without the built-in stuff."),Object(r.b)("p",null,"The example below shows this in action. Note that the type of the top-level spec changes from the usual ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Misc.html#t:TopSpec"},"TopSpec")," to ",Object(r.b)("a",{parentName:"p",href:"http://hackage.haskell.org/package/sandwich/docs/Test-Sandwich-Misc.html#t:TopSpecWithOptions-39-"},"TopSpecWithOptions' a"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-haskell",metastring:'title="https://github.com/codedownio/sandwich/blob/master/demos/demo-command-line-args/app/Main.hs"',title:'"https://github.com/codedownio/sandwich/blob/master/demos/demo-command-line-args/app/Main.hs"'},'import Options.Applicative\nimport Test.Sandwich\n\ndata MyArgs = MyArgs {\n  myArgsFoo :: String\n  , myArgsBar :: Int\n  }\n\nmyArgsParser :: Parser MyArgs\nmyArgsParser = MyArgs\n  <$> strOption (long "foo" <> help "Value of foo" <> metavar "STRING")\n  <*> option auto (long "bar" <> showDefault <> help "Value of bar" <> value 1 <> metavar "INT")\n\ncommandLineArgsDemo :: TopSpecWithOptions\' MyArgs\ncommandLineArgsDemo = describe "Custom command line args" $ do\n  it "Uses the custom command line args" $ do\n    MyArgs {..} <- getUserCommandLineOptions\n    warn [i|Got foo: #{myArgsFoo}|]\n    warn [i|Got bar: #{myArgsBar}|]\n\nmain :: IO ()\nmain = runSandwichWithCommandLineArgs\' testOptions myArgsParser commandLineArgsDemo\n')),Object(r.b)("p",null,"Now we can run this with"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"cd sandwich/sandwich-demos\nstack run demo-command-line-args -- --print --foo asdf --bar 42\n")),Object(r.b)("p",null,"and the tests will use our custom values."))}m.isMDXComponent=!0}}]);